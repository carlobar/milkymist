/*
 * LatticeMico32 C startup code.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* Exception handlers - Must be 32 bytes long. */


.macro PRINT str
	mvhi	r1, hi(\str)
	ori	r1, r1, lo(\str)
	calli	print
.endm



.section    .text, "ax", @progbits
.global     _start
.global		mem_test
.global 	print_lcd 
_start:
_reset_handler:
	xor	r0, r0, r0
	wcsr	IE, r0
	mvhi	r1, hi(_reset_handler)
	ori	r1, r1, lo(_reset_handler)
	wcsr	EBA, r1
	calli	_sdram_init
	xor	r2, r2, r2
	calli	_crt0

_breakpoint_handler:
	nop; nop; nop; nop
	nop; nop; nop; nop

_instruction_bus_error_handler:
	nop; nop; nop; nop
	nop; nop; nop; nop

_watchpoint_hander:
	nop; nop; nop; nop
	nop; nop; nop; nop

_data_bus_error_handler:

	nop; nop; nop; nop
	nop; nop; nop; nop

_divide_by_zero_handler:

	nop; nop; nop; nop
	nop; nop; nop; nop

_interrupt_handler:

	nop; nop; nop; nop
	nop; nop; nop; nop

_system_call_handler:

	nop; nop; nop; nop
	nop; nop; nop; nop



mem_test:
/* memory test */

	PRINT(init)
	mvhi r1, hi(0x40000000)
	ori  r1, r1, lo(0x40000000)	
	mvhi r2, hi(0x53334558)
	ori  r2, r2, lo(0x53334558)
	sw   (r1+0), r2
	mvhi r2, hi(0x2d2d0a00)
	ori  r2, r2, lo(0x2d2d0a00)
	sw   (r1+4), r2
	PRINT(write)

	mvhi r1, hi(0x40000000)
	ori  r1, r1, lo(0x40000000)	
//	lw   r1,(r2+0)
	calli print//int 
	PRINT(end)
	ret

_crt0:

	/* Setup stack and global pointer */
	mvhi    sp, hi(_fstack)
	ori     sp, sp, lo(_fstack)
	mvhi    gp, hi(_gp)
	ori     gp, gp, lo(_gp)

	//calli	mem_test





/*	PRINT(bss_init)
	mvhi r1, hi(0x410001f0)
	ori  r1, r1, lo(0x410001f0)	
	mvhi r2, hi(0x494e4954) //INIT
	ori  r2, r2, lo(0x494e4954) //INIT
	sw   (r1+0), r2

	mvhi r2, hi(0x44415441)
	ori  r2, r2, lo(0x44415441)
	sw   (r1+4), r2	
*/
/*
	mvhi r2, hi(0x00000000)
	ori  r2, r2, lo(0x00000000)
	sw   (r1+4), r2	

*/
/*	mvhi r2, hi(0x656e6400)
	ori  r2, r2, lo(0x656e6400)
	sw   (r1+8), r2
	calli	print

*/
/*	PRINT(bss_stored)

	mvhi r1, hi(0x41000000)
	ori  r1, r1, lo(0x41000000)	

	calli	print

*/
/*Turn on leds*/
/*
	mvhi r1, hi(0x60001004)
	ori  r1, r1, lo(0x60001004)	
	mvhi r2, 0x0000
	ori  r2, r2, 0x0020
	sw   (r1+0), r2  
*/
	/* Clear BSS */
	mvhi    r1, hi(_fbss)
	ori     r1, r1, lo(_fbss)
	mvhi    r3, hi(_ebss)
	ori     r3, r3, lo(_ebss)

	mvhi    r4, hi(.clearBSS)
	ori     r4, r4, lo(.clearBSS)
/*
	mvhi r5, hi(0x60001004)
	ori  r5, r5, lo(0x60001004)	

	mvhi r6, hi(0x00000000)
	ori  r6, r6, lo(0x00000000)

	mvhi r7, hi(0x000003e8)
	ori  r7, r6, lo(0x000000e8)		

	mvhi r8, hi(0x00000000)
	ori  r8, r8, lo(0x00000000)
*/

.clearBSS:
	bge      r1, r3, .callMain
	sw      (r1+0), r0
	addi    r1, r1, 4
	addi    r6, r6, 1
//	bge	r6, r7, .inc
//	bi	.normal
/*
.inc:
	addi	r8, r8, 1

	mvhi r6, hi(0x00000000)
	ori  r6, r6, lo(0x00000000)
*/
//.normal:
//	sw     (r5+0), r1

	b      r4
/*	nop
	nop
	nop
	nop
	nop
*/

.callMain:

/*Turn on leds*/
/*
	mvhi r1, hi(0x60001004)
	ori  r1, r1, lo(0x60001004)	
	mvhi r2, 0x0000
	ori  r2, r2, 0x003f
	sw   (r1+0), r2  
*/



//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
// mem test

/*

	
	// segunda escritura
	mvhi r19, hi(0x40000020)
	ori  r19, r19, lo(0x40000020)

	mvhi r4, hi(0xcafebabe)
	ori  r4, r4, lo(0xcafebabe)
	sw   (r19+0), r4		// almacenar dato en memoria

	mvhi r19, hi(0x60005004)
	ori  r19, r19, lo(0x60005004)
	sw   (r19+0), r4		//visualizar dato en lcd



	// primera escritura
	mvhi r19, hi(0x40000000)
	ori  r19, r19, lo(0x40000000)

	mvhi r4, hi(0xabadface)
	ori  r4, r4, lo(0xabadface)
	sw   (r19+0), r4		// almacenar dato en memoria

	mvhi r19, hi(0x60001004)
	ori  r19, r19, lo(0x60001004)
	sw   (r19+0), r4	



		// tercera escritura
	mvhi r19, hi(0x40000010)
	ori  r19, r19, lo(0x40000010)

	mvhi r4, hi(0x12345678)
	ori  r4, r4, lo(0x12345678)
	sw   (r19+0), r4		// almacenar dato en memoria



	// enviar orden inicio de lectura
	mvhi r4, hi(0xefecadab)	// commando 
	ori  r4, r4, lo(0xefecadab)
	mvhi r19, hi(0x60004004)	// almacenar insruccion en data_out_b
	ori  r19, r19, lo(0x60004004)
	sw   (r19+0), r4


	// primera lectura

	mvhi r19, hi(0x40000000)
	ori  r19, r19, lo(0x40000000)
	lw   r4, (r19+0)		// leer dato	


	mvhi r19, hi(0x60004004)	// visualizar lectura en lcd
	ori  r19, r19, lo(0x60004004)
	sw   (r19+0), r4



	// segunda lectura
	mvhi r19, hi(0x40000020)
	ori  r19, r19, lo(0x40000020)
	lw   r5, (r19+0)		// leer dato	




	mvhi r19, hi(0x60006004)	// visualizar lectura en lcd
	ori  r19, r19, lo(0x60006004)
	sw   (r19+0), r5
*/


//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////




	mv      r1, r2
	mvi     r2, 0
	mvi     r3, 0
	calli   main



print_lcd:

// primera lectura

	mvhi r19, hi(0x40000000)
	ori  r19, r19, lo(0x40000000)
	lw   r4, (r19+0)		// leer dato	
	lw   r5, (r19+4)		// leer dato	


	mvhi r19, hi(0x60004004)	// visualizar lectura en lcd
	ori  r19, r19, lo(0x60004004)
	sw   (r19+0), r4

	mvhi r19, hi(0x60001004)	// visualizar lectura en lcd
	ori  r19, r19, lo(0x60001004)
	sw   (r19+0), r5
	ret


.section .rodata, "a"
init: .string "\nMemory test---"
write: .string "\nData was wrote, it was: \n"
end: .string "End of test---\n"
bss_init: .string "Reading BSS section: "
bss_stored: .string "Data stored: "
